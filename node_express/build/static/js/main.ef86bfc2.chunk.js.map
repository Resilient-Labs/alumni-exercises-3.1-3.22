{"version":3,"sources":["services/persons.js","components/Filter.js","components/PersonForm.js","components/Persons.js","components/Notification.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","name","number","post","id","delete","updatedPerson","put","Filter","searchName","setSearchName","value","onChange","event","target","PersonForm","newName","setNewName","newNumber","setNewNumber","addPerson","focusName","onSubmit","required","autoComplete","ref","type","Persons","persons","deletePerson","length","style","listStyle","padding","filter","person","toLowerCase","includes","map","onClick","Notification","message","setMessage","setType","useEffect","timer","setTimeout","clearTimeout","className","App","useState","setPersons","useRef","clearInput","current","focus","personService","preventDefault","existingPerson","find","window","confirm","catch","error","newPerson","concat","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ef86bfc2.chunk.js","sourcesContent":["// helper functions for communicating with the server using axios\nimport axios from 'axios';\nconst baseUrl = '/api/persons';\n\n// get all persons in phonebook\nconst getAll = () => (\n    axios\n        .get(baseUrl)\n        .then(response => response.data)\n);\n\n// add person to phonebook\nconst create = (name, number) => (\n    axios\n        .post(baseUrl, {name, number})\n        .then(response => response.data)\n)\n\n// remove a person from phonebook\nconst remove = id => axios.delete(`${baseUrl}/${id}`);\n\n// update phone number of existing person\nconst update = (id, updatedPerson) => (\n    axios\n        .put(`${baseUrl}/${id}`, updatedPerson)\n        .then(response => response.data)\n);\n\nexport default {getAll, create, remove, update};","import React from 'react';\n\n// component that filters the phonebook by the searched name\n\nconst Filter = ({searchName, setSearchName}) => {\n    return (\n        <div>\n            Search for name: <input value={searchName} \n                onChange={event => setSearchName(event.target.value)}\n            />\n        </div>\n    );\n};\n\nexport default Filter;","import React from 'react';\n\n// Component for adding a new person to the phonebook\n\nconst PersonForm = ({newName, setNewName, newNumber, setNewNumber, addPerson, focusName}) => {\n    return (\n        <form onSubmit={addPerson}>\n            <div>\n                Name: <input value={newName} onChange={event => setNewName(event.target.value)} \n                    required autoComplete='off' ref={focusName}\n                />\n            </div>\n            <div>\n                Number: <input value={newNumber} onChange={event => setNewNumber(event.target.value)} \n                    required autoComplete='off'\n                />\n            </div>\n            <div>\n                <button type=\"submit\">Add</button>\n            </div>\n        </form>\n    );\n};\n\nexport default PersonForm;","\nimport React from 'react';\n\n// Component for displaying all the persons in the phonebook\n\nconst Persons = ({persons, searchName, deletePerson}) => {\n    return (\n        persons.length ?\n        <ul style={{listStyle: 'none', padding: 0}}>\n            {\n                persons.filter(person => person.name.toLowerCase().includes(searchName.toLowerCase()))\n                .map(person => (\n                    <li key={person.name}>\n                        {person.name} {person.number} &nbsp;\n                        <button onClick={() => deletePerson(person.id, person.name)}>Delete</button>\n                    </li>\n                ))\n            }\n        </ul>\n        :\n        <p>Loading contacts...</p>\n    );\n};\n\nexport default Persons;","import React, { useEffect } from 'react';\n\n// component displays a notification using the given message (and type, for styling purposes)\n\nconst Notification = ({message, type, setMessage, setType}) => {\n\n    // display notification message for 5 seconds\n    useEffect(() => {\n        if (message) {\n            const timer = setTimeout(() => {\n                setMessage(null);\n                setType('');\n            }, 10000);\n            return () => clearTimeout(timer);\n        }\n    }, [message]);\n\n    return (\n        message ?\n        <div className={type}>\n            {message}\n        </div>\n        :\n        null\n    );\n};\n\nexport default Notification;","import React, { useState, useRef, useEffect } from 'react';\nimport personService from './services/persons';\nimport Filter from './components/Filter';\nimport PersonForm from './components/PersonForm';\nimport Persons from './components/Persons';\nimport Notification from './components/Notification';\nimport './index.css';\n\nconst App = () => {\n  const [ persons, setPersons] = useState([]);\n  const [ newName, setNewName ] = useState('');\n  const [ newNumber, setNewNumber ] = useState('');\n  const [ searchName, setSearchName ] = useState('');\n  \n  // notification message and its type\n  const [ message, setMessage ] = useState(null);\n  const [ type, setType ] = useState('');\n\n  const focusName = useRef();\n\n  // Function clears input data and places focus back on name input after a person is added or updated\n  const clearInput = () => {\n    setNewName('');\n    setNewNumber('');\n    focusName.current.focus();    \n  };\n\n  // Fetch persons array from json-server once the component is rendered for the first time\n  useEffect(() => {\n    personService.getAll()\n    .then(setPersons);\n  }, []);\n\n  // Function to add a person to the phonebook\n  const addPerson = event => {\n    event.preventDefault();\n\n    const existingPerson = persons.find(person => person.name === newName);\n    // validate inputs\n    \n\n    // Update person if newName already exists, otherwise add new person\n    if (existingPerson) {\n      window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`) &&\n      personService.update(existingPerson.id, {number: newNumber})\n      .then(updatedPerson => {\n        setPersons(persons.map(person => person.id === updatedPerson.id ? updatedPerson : person));\n        \n        // Set notification message to be displayed\n        setMessage(`Updated ${newName}'s number`);\n        setType('info');\n\n        clearInput();\n      })\n      .catch(error => {\n        // When a user tries to update an already deleted person\n        if (error.name === 'TypeError') {\n          setMessage(`Information of ${newName} has already been deleted`);\n          setPersons(persons.filter(person => person.id !== existingPerson.id));\n        } else {\n          setMessage(error.response.data.error);\n        }\n\n        setType('error');\n      });\n    } else {\n      personService.create(newName, newNumber)\n      .then(newPerson => {\n        setPersons(persons.concat(newPerson));\n\n        // setting notification message to display\n        setMessage(`Added ${newName}`);\n        setType('info');\n\n        clearInput();\n      })\n      .catch(error => {\n        setMessage(error.response.data.error);\n        setType('error');\n      });\n    }\n  };\n\n  // delete a person from the phonebook\n  const deletePerson = (id, name) => {\n    if (window.confirm(`Delete ${name}?`)) {\n      personService.remove(id)\n      .then(() => {\n        setPersons(persons.filter(person => person.id !== id));\n        setMessage(`Deleted ${name}`);\n        setType('info');\n      });\n    } \n  };\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={message} type={type} setMessage={setMessage} setType={setType} />\n      <Filter searchName={searchName} setSearchName={setSearchName} />\n\n      <h3>Add a new</h3>\n      <PersonForm newName={newName} setNewName={setNewName} newNumber={newNumber} setNewNumber={setNewNumber}\n        addPerson={addPerson} focusName={focusName}\n      />\n\n      <h3>Numbers</h3>\n      <Persons persons={persons} searchName={searchName} deletePerson={deletePerson} />\n    </div>\n  );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}